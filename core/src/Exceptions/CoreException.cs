//----------------------------------------------------------------------
//
// Copyright (c) Microsoft Corporation.
// All rights reserved.
//
// This code is licensed under the MIT License.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files(the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions :
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//
//------------------------------------------------------------------------------

using System;
using System.Globalization;

namespace Microsoft.Identity.Core.Exceptions
{
    /// <summary>
    ///     Abstract base exception, never thrown by itself.
    /// </summary>
    public abstract class CoreException : Exception
    {
        /// <inheritdoc />
        /// <summary>
        ///     Initializes a new instance of the exception class.
        /// </summary>
        /// <param name="errorCode">
        ///     The error code returned by the service or generated by client. This is the code you can rely on
        ///     for exception handling.
        /// </param>
        /// <param name="message">The error message that explains the reason for the exception.</param>
        protected CoreException(string errorCode, string message)
            : base(message)
        {
            ErrorCode = errorCode;
        }

        /// <inheritdoc />
        /// <summary>
        ///     Initializes a new instance of the exception class.
        /// </summary>
        /// <param name="errorCode">
        ///     The error code returned by the service or generated by client. This is the code you can rely on
        ///     for exception handling.
        /// </param>
        /// <param name="message">The error message that explains the reason for the exception.</param>
        /// <param name="innerException">
        ///     The exception that is the cause of the current exception, or a null reference if no inner
        ///     exception is specified. It may especially contain the actual error message returned by the service.
        /// </param>
        protected CoreException(string errorCode, string message, Exception innerException)
            : base(message, innerException)
        {
            ErrorCode = errorCode;
        }

        /// <summary>
        ///     Gets the protocol error code returned by the service or generated by client. This is the code you can rely on for
        ///     exception handling. Values for this code are typically provided in constant strings in the derived exceptions types
        ///     with explanations of mitigation.
        /// </summary>
        public string ErrorCode { get; }

        /// <inheritdoc />
        public override string ToString()
        {
            return base.ToString() + string.Format(CultureInfo.CurrentCulture, "\n\tErrorCode: {0}", ErrorCode);
        }
    }
}